{"version":3,"sources":["components/common.module.scss","reducers/typingReducer.js","redux-store.js","components/Quote.jsx","components/QuoteInput.jsx","components/Timer.jsx","components/Container.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","typingField","speed","time","quote","totalWordsCount","typingReducer","state","action","type","TYPING","char","INCREMENT_TIME","RESET_TIME","SET_SPEED","SET_QUOTE","SET_TOTAL_WORDS_COUNT","wordsCount","handleTyping","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Quote","quoteSplitted","split","className","style","quoteDisplay","map","index","styling","length","correct","incorrect","key","QuoteInput","quoteInput","autoFocus","onChange","e","target","value","Timer","incrementTime","resetTime","checkEquality","useEffect","interval","setInterval","clearInterval","timer","timing","connect","typingSpeed","getRandomQuote","dispatch","fetch","then","response","json","data","content","match","props","speedResult","Math","floor","container","App","id","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f81088b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"common_container__1w22w\",\"timer\":\"common_timer__1lPWc\",\"quoteDisplay\":\"common_quoteDisplay__2G1Ds\",\"quoteInput\":\"common_quoteInput__3WPRD\",\"correct\":\"common_correct__2DFBm\",\"incorrect\":\"common_incorrect__3cMbY\",\"notTouched\":\"common_notTouched__39yQU\",\"speed\":\"common_speed__1m49M\",\"time\":\"common_time__13LVJ\"};","const initialState = {\r\n  typingField: \"\",\r\n  speed: 0,\r\n  time: 0,\r\n  quote: \"\",\r\n  totalWordsCount: 1,\r\n};\r\n\r\nconst typingReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case TYPING:\r\n      return {\r\n        ...state,\r\n        typingField: action.char,\r\n      };\r\n    case INCREMENT_TIME:\r\n      return {\r\n        ...state,\r\n        time: state.time + 1,\r\n      };\r\n    case RESET_TIME:\r\n      return {\r\n        ...state,\r\n        time: 0,\r\n      };\r\n    case SET_SPEED:\r\n      return {\r\n        ...state,\r\n        speed: action.speed,\r\n      };\r\n    case SET_QUOTE:\r\n      return {\r\n        ...state,\r\n        quote: action.quote,\r\n      };\r\n    case SET_TOTAL_WORDS_COUNT:\r\n      return {\r\n        ...state,\r\n        totalWordsCount: action.wordsCount,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default typingReducer;\r\n\r\nconst RANDOM_QUOT_API = \"https://api.quotable.io/random\";\r\nconst TYPING = \"TYPING\";\r\nexport const handleTyping = (char) => ({ type: TYPING, char });\r\nconst INCREMENT_TIME = \"INCREMENT_TIME\";\r\nexport const incrementTime = () => ({ type: INCREMENT_TIME });\r\nconst RESET_TIME = \"RESET_TIME\";\r\nexport const resetTime = () => ({ type: RESET_TIME });\r\nconst SET_SPEED = \"SET_SPEED\";\r\nexport const typingSpeed = (speed) => ({ type: SET_SPEED, speed });\r\nconst SET_QUOTE = \"SET_QUOTE\";\r\nconst setQuote = (quote) => ({ type: SET_QUOTE, quote });\r\nconst SET_TOTAL_WORDS_COUNT = \"SET_TOTAL_WORDS_COUNT\";\r\nconst setWordsCount = (wordsCount) => ({\r\n  type: SET_TOTAL_WORDS_COUNT,\r\n  wordsCount,\r\n});\r\n\r\nexport const getRandomQuote = () => (dispatch) => {\r\n  fetch(RANDOM_QUOT_API)\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      dispatch(setQuote(data.content));\r\n      dispatch(setWordsCount(data.content.match(/(\\w+)/g).length));\r\n      dispatch(handleTyping(\"\"));\r\n    });\r\n};\r\n","import { combineReducers, createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport typingReducer from \"./reducers/typingReducer\";\r\n\r\nlet reducers = combineReducers({\r\n  typingReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nlet store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport style from \"./common.module.scss\";\r\n\r\nconst Quote = ({ quote, typingField }) => {\r\n  let quoteSplitted = quote.split(\"\");\r\n  return (\r\n    <div className={style.quoteDisplay}>\r\n      {quoteSplitted.map((char, index) => {\r\n        let styling;\r\n        if (index < typingField.length) {\r\n          styling =\r\n            char === typingField[index] ? style.correct : style.incorrect;\r\n        }\r\n        return (\r\n          <span className={styling} key={index}>\r\n            {char}\r\n          </span>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default Quote;\r\n","import React from \"react\";\r\nimport style from \"./common.module.scss\";\r\n\r\nconst QuoteInput = ({ handleTyping, typingField }) => {\r\n  const onChange = (e) => {\r\n    handleTyping(e.target.value);\r\n  };\r\n  return (\r\n    <textarea\r\n      className={style.quoteInput}\r\n      autoFocus\r\n      onChange={onChange}\r\n      value={typingField}\r\n    ></textarea>\r\n  );\r\n};\r\nexport default QuoteInput;\r\n","import React, { useEffect } from \"react\";\r\nimport style from \"./common.module.scss\";\r\n\r\nconst Timer = ({\r\n  incrementTime,\r\n  resetTime,\r\n  quote,\r\n  typingField,\r\n  speed,\r\n  time,\r\n}) => {\r\n  let checkEquality = typingField === quote;\r\n  useEffect(() => {\r\n    let interval = setInterval(() => incrementTime(), 1000);\r\n    return () => {\r\n      resetTime();\r\n      clearInterval(interval);\r\n    };\r\n  }, [quote, checkEquality]);\r\n\r\n  return (\r\n    <div className={style.timer}>\r\n      <span className={style.time}>{time}</span>\r\n      <span className={style.timing}>\r\n        Your typing speed was <span className={style.speed}>{speed}</span>\r\n        seconds per word\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\nexport default Timer;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Quote from \"./Quote\";\r\nimport QuoteInput from \"./QuoteInput\";\r\nimport Timer from \"./Timer\";\r\nimport style from \"./common.module.scss\";\r\n\r\nimport {\r\n  handleTyping,\r\n  incrementTime,\r\n  typingSpeed,\r\n  getRandomQuote,\r\n  resetTime,\r\n} from \"../reducers/typingReducer\";\r\n\r\nconst Container = (props) => {\r\n  let {\r\n    getRandomQuote,\r\n    typingField,\r\n    quote,\r\n    typingSpeed,\r\n    time,\r\n    totalWordsCount,\r\n    handleTyping,\r\n    speed,\r\n    resetTime,\r\n    incrementTime,\r\n  } = props;\r\n  useEffect(() => {\r\n    getRandomQuote();\r\n  }, []);\r\n  useEffect(() => {\r\n    if (typingField === quote) {\r\n      getRandomQuote();\r\n      let speedResult = Math.floor(time / totalWordsCount);\r\n      typingSpeed(speedResult);\r\n    }\r\n  }, [typingField]);\r\n  return (\r\n    <div className={style.container}>\r\n      <Timer\r\n        speed={speed}\r\n        incrementTime={incrementTime}\r\n        resetTime={resetTime}\r\n        typingField={typingField}\r\n        quote={quote}\r\n        time={time}\r\n      />\r\n      <Quote quote={quote} typingField={typingField} />\r\n      <QuoteInput handleTyping={handleTyping} typingField={typingField} />\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  typingField: state.typingReducer.typingField,\r\n  time: state.typingReducer.time,\r\n  speed: state.typingReducer.speed,\r\n  quote: state.typingReducer.quote,\r\n  totalWordsCount: state.typingReducer.totalWordsCount,\r\n});\r\nexport default connect(mapStateToProps, {\r\n  handleTyping,\r\n  incrementTime,\r\n  typingSpeed,\r\n  getRandomQuote,\r\n  resetTime,\r\n})(Container);\r\n","import React from \"react\";\nimport Container from \"./components/Container\";\nimport \"./App.css\";\n\nconst App = (props) => {\n  return (\n    <div className=\"appContainer\">\n      <span className=\"title\">\n        {\" \"}\n        <span id=\"greenCube\">mark</span> Check your typing skills\n      </span>\n      <Container />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux-store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}